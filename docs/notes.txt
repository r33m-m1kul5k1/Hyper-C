the bug:

when enabling paging back with pae in protected mode the HV crashes.

reasons:
1. I shouldn't load the cr3 register when jumping to protected mode from long mode.
2. Most likely not a format issue.

solutions:
1. to not use pae & paging in protected mode.


the bug:

when returning from the protected_to_real function the ret instruction jumps to 0xcec
it happens without the cpu host

reasons:
1. sti results an interrupt call
2. takes the wrong address from the stack
3. disabling paging the wrong way - not it
4. maybe protected mode must use paging?

the stack address was higher then accessible in real mode :)


the bug:

when a bios interrupt called ip frezzes on the same line.

situation:
I'm in real mode after jumping protected -> long -> protected (without paing and pae) -> real 

1. my host computer is not able to interact with the bios to qemu
2. the gdt is not loaded :()? yes but gdb is not able to show it.
3. am I overriding some important code? most likely not.
4. kvm on archlinux doesn't support interrupts


the bug:
I create multiple definitions of an array of strings

the reason:
I include vmm.h twice, once for the vmm.c and once for initialize_host.c

inside the vmm.h we need to include the error codes

the bug:
invalid guest state.

possible faults:

under guest state:

under general:
1. TSC_OFFSET & HIGH
2. PAGE_FAULT_ERROR_CODE_MASK
3. PAGE_FAULT_ERROR_CODE_MATCH
4. VMCS_CR3_TARGET_COUNT
5. CR0_GUEST_HOST_MASK
6. CR4_GUEST_HOST_MASK


under vm-exit:
1. VM_EXIT_VMCS_VM_ENTRY_INTR_INFOMSR_STORE_COUNT
2. VM_EXIT_MSR_LOAD_COUNT

under vm-entry:
1. VM_ENTRY_MSR_LOAD_COUNT
2. VMCS_VM_ENTRY_INTR_INFO 

solutions:
- go again through the fields with vmread
- use bochs / another computer
- add the general configuration 


vmlaunch check:
Attempt to load guest state and PDPTRs as appropriate



msr monitor:
1. one bit for each msr. meaning:
MSR 0 -> bitmap 0
MSR 1 -> bitmap 01
MSR 2 -> bitmap 10
MSR A -> bitmap 100 0000 0000
MSR F01 -> bitmap 


vmexit wrapper:

vmresume -> takes the vmcs guest state area and loads it:

rsp -> the vmm stack
rip -> next instruction in the vmm 